#!/usr/bin/env python3

import datetime
import sqlite3
import argparse
import sys
import os
from pathlib import Path


db_dir = "{}/.longtimenosee/".format(str(Path.home()))
db_file = "longtimenosee.db"


def get_db_connection():
    db_path = Path(db_dir+db_file)
    if not db_path.is_file():
        create_db_file(db_dir, db_file)
    return sqlite3.connect(str(db_path.absolute()))


def create_db_file(dir, file):
    print("Creating db...")
    if not Path(dir).is_dir():
        os.mkdir(dir)
    connection = sqlite3.connect(str(dir+file))
    cursor = connection.cursor()
    cursor.execute("create table contacts(name varchar(30) UNIQUE, last_contact TEXT)")
    connection.commit()
    print("Done, saved db in: {}".format(str(dir+file)))

def list_contacts():
    db = get_db_connection()
    query = "select * FROM contacts"
    cursor = db.execute(query)
    result = cursor.fetchall()
    if result is None:
        print("No tracked contacts yet")
    else:
        for c in result: 
          name = str(c[0])
          contact = str(c[1])
          print("Contact {} was last contacted on {}".format(name, contact))
    db.close()

def get_random():
    db = get_db_connection()
    query = "select * FROM contacts order by RANDOM() limit 1"
    cursor = db.execute(query)
    result = cursor.fetchone()
    if result is None:
        print("No tracked contacts yet")
    else:
        name = str(result[0])
        last_contact = str(result[1])
        print("Random is {} who was last contacted on {}".format(name, last_contact))
    db.close()


def get_oldest():
    db = get_db_connection()
    query = "select * FROM contacts order by date(last_contact) limit 1"
    cursor = db.execute(query)
    result = cursor.fetchone()
    if result is None:
        print("No tracked contacts yet")
    else:
        name = str(result[0])
        last_contact = str(result[1])
        print("Oldest non contacted is {} who was last contacted on {}".format(name, last_contact))
    db.close()


def update(name):
    db = get_db_connection()
    params = (name, )
    cursor = db.execute("UPDATE contacts set last_contact=date('now') where name = ?", params)
    db.commit()
    db.close()
    if cursor.rowcount == 0:
        print("No contact with name \"{}\" was found on the db".format(name))
        sys.exit(1)


def validate_date(contact_date):
    try:
        datetime.datetime.strptime(contact_date, '%d/%m/%Y')
    except ValueError:
        raise ValueError("Incorrect data format ({}), should be DD/MM/YYYY".format(contact_date))


def add_new(name, last_contact):
    db = get_db_connection()
    if last_contact is None:
        last_contact = "01/01/1970"
    else:
        try:
            validate_date(last_contact)
        except ValueError as e:
            print(str(e))
            sys.exit(1)
    try:
        params = (name, last_contact,)
        db.cursor().execute("insert into contacts (name, last_contact) values (?, ?)", params)
        db.commit()
        db.close()
    except sqlite3.IntegrityError:
        print("Could not add '{}' twice. It already exists in the db.".format(name))


parser = argparse.ArgumentParser()
group = parser.add_mutually_exclusive_group()
group.add_argument("--list", help="List all the contacts", action="store_true")
group.add_argument("--add", type=str, help="Insert a new contact")
group.add_argument("--oldest", help="Get the oldest non contacted contact", action="store_true")
group.add_argument("--random", help="Get a random contact", action="store_true")
group.add_argument("--update", help="Update a contact")
parser.add_argument("--last", type=str, help="last contacted date for this specific  date", default="01/01/1970")

arguments = parser.parse_args()

if arguments.oldest is False and arguments.random is False and arguments.update is None and arguments.add is None and arguments.list is None:
    parser.error("You need to specify either `oldest` or `random` or `update` or `add` or `list`")

if arguments.oldest:
    get_oldest()

if arguments.random:
    get_random()

if arguments.update:
    update(arguments.update)

if arguments.list: 
    list_contacts()
  
if arguments.add:
    add_new(arguments.add, arguments.last)
